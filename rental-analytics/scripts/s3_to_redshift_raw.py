import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue import DynamicFrame

args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Script generated for node Amazon S3
AmazonS3_node1749987984676 = glueContext.create_dynamic_frame.from_catalog(database="rental_redshift_raw", table_name="bookings", transformation_ctx="AmazonS3_node1749987984676")

# Script generated for node Amazon S3
AmazonS3_node1749988197969 = glueContext.create_dynamic_frame.from_catalog(database="rental_redshift_raw", table_name="user_viewing", transformation_ctx="AmazonS3_node1749988197969")

# Script generated for node Amazon S3
AmazonS3_node1749987875205 = glueContext.create_dynamic_frame.from_catalog(database="rental_redshift_raw", table_name="apartments", transformation_ctx="AmazonS3_node1749987875205")

# Script generated for node Amazon S3
AmazonS3_node1749987257186 = glueContext.create_dynamic_frame.from_catalog(database="rental_redshift_raw", table_name="apartment_attributes", transformation_ctx="AmazonS3_node1749987257186")

# Script generated for node Amazon Redshift
AmazonRedshift_node1749987991215 = glueContext.write_dynamic_frame.from_options(frame=AmazonS3_node1749987984676, connection_type="redshift", connection_options={"postactions": "BEGIN; MERGE INTO raw_data.stg_bookings USING raw_data.stg_bookings_temp_4q96mr ON stg_bookings.booking_id = stg_bookings_temp_4q96mr.booking_id WHEN MATCHED THEN UPDATE SET booking_id = stg_bookings_temp_4q96mr.booking_id, user_id = stg_bookings_temp_4q96mr.user_id, apartment_id = stg_bookings_temp_4q96mr.apartment_id, booking_date = stg_bookings_temp_4q96mr.booking_date, checkin_date = stg_bookings_temp_4q96mr.checkin_date, checkout_date = stg_bookings_temp_4q96mr.checkout_date, total_price = stg_bookings_temp_4q96mr.total_price, currency = stg_bookings_temp_4q96mr.currency, booking_status = stg_bookings_temp_4q96mr.booking_status WHEN NOT MATCHED THEN INSERT VALUES (stg_bookings_temp_4q96mr.booking_id, stg_bookings_temp_4q96mr.user_id, stg_bookings_temp_4q96mr.apartment_id, stg_bookings_temp_4q96mr.booking_date, stg_bookings_temp_4q96mr.checkin_date, stg_bookings_temp_4q96mr.checkout_date, stg_bookings_temp_4q96mr.total_price, stg_bookings_temp_4q96mr.currency, stg_bookings_temp_4q96mr.booking_status); DROP TABLE raw_data.stg_bookings_temp_4q96mr; END;", "redshiftTmpDir": "s3://aws-glue-assets-198170203035-us-east-1/temporary/", "useConnectionProperties": "true", "dbtable": "raw_data.stg_bookings_temp_4q96mr", "connectionName": "Redshift connection", "preactions": "CREATE TABLE IF NOT EXISTS raw_data.stg_bookings (booking_id INTEGER, user_id INTEGER, apartment_id INTEGER, booking_date DATE, checkin_date DATE, checkout_date DATE, total_price DECIMAL, currency VARCHAR, booking_status VARCHAR); DROP TABLE IF EXISTS raw_data.stg_bookings_temp_4q96mr; CREATE TABLE raw_data.stg_bookings_temp_4q96mr (booking_id INTEGER, user_id INTEGER, apartment_id INTEGER, booking_date DATE, checkin_date DATE, checkout_date DATE, total_price DECIMAL, currency VARCHAR, booking_status VARCHAR);"}, transformation_ctx="AmazonRedshift_node1749987991215")

# Script generated for node Amazon Redshift
AmazonRedshift_node1749988235505 = glueContext.write_dynamic_frame.from_options(frame=AmazonS3_node1749988197969, connection_type="redshift", connection_options={"postactions": "BEGIN; MERGE INTO raw_data.stg_user_viewing USING raw_data.stg_user_viewing_temp_beapdc ON stg_user_viewing.user_id = stg_user_viewing_temp_beapdc.user_id AND stg_user_viewing.apartment_id = stg_user_viewing_temp_beapdc.apartment_id AND stg_user_viewing.viewed_at = stg_user_viewing_temp_beapdc.viewed_at WHEN MATCHED THEN UPDATE SET user_id = stg_user_viewing_temp_beapdc.user_id, apartment_id = stg_user_viewing_temp_beapdc.apartment_id, viewed_at = stg_user_viewing_temp_beapdc.viewed_at, is_wishlisted = stg_user_viewing_temp_beapdc.is_wishlisted, call_to_action = stg_user_viewing_temp_beapdc.call_to_action WHEN NOT MATCHED THEN INSERT VALUES (stg_user_viewing_temp_beapdc.user_id, stg_user_viewing_temp_beapdc.apartment_id, stg_user_viewing_temp_beapdc.viewed_at, stg_user_viewing_temp_beapdc.is_wishlisted, stg_user_viewing_temp_beapdc.call_to_action); DROP TABLE raw_data.stg_user_viewing_temp_beapdc; END;", "redshiftTmpDir": "s3://aws-glue-assets-198170203035-us-east-1/temporary/", "useConnectionProperties": "true", "dbtable": "raw_data.stg_user_viewing_temp_beapdc", "connectionName": "Redshift connection", "preactions": "CREATE TABLE IF NOT EXISTS raw_data.stg_user_viewing (user_id INTEGER, apartment_id INTEGER, viewed_at TIMESTAMP, is_wishlisted BOOLEAN, call_to_action VARCHAR); DROP TABLE IF EXISTS raw_data.stg_user_viewing_temp_beapdc; CREATE TABLE raw_data.stg_user_viewing_temp_beapdc (user_id INTEGER, apartment_id INTEGER, viewed_at TIMESTAMP, is_wishlisted BOOLEAN, call_to_action VARCHAR);"}, transformation_ctx="AmazonRedshift_node1749988235505")

# Script generated for node Amazon Redshift
AmazonRedshift_node1749987879948 = glueContext.write_dynamic_frame.from_options(frame=AmazonS3_node1749987875205, connection_type="redshift", connection_options={"postactions": "BEGIN; MERGE INTO raw_data.stg_apartments USING raw_data.stg_apartments_temp_mjqm7i ON stg_apartments.id = stg_apartments_temp_mjqm7i.id WHEN MATCHED THEN UPDATE SET id = stg_apartments_temp_mjqm7i.id, title = stg_apartments_temp_mjqm7i.title, source = stg_apartments_temp_mjqm7i.source, price = stg_apartments_temp_mjqm7i.price, currency = stg_apartments_temp_mjqm7i.currency, listing_created_on = stg_apartments_temp_mjqm7i.listing_created_on, is_active = stg_apartments_temp_mjqm7i.is_active, last_modified_timestamp = stg_apartments_temp_mjqm7i.last_modified_timestamp WHEN NOT MATCHED THEN INSERT VALUES (stg_apartments_temp_mjqm7i.id, stg_apartments_temp_mjqm7i.title, stg_apartments_temp_mjqm7i.source, stg_apartments_temp_mjqm7i.price, stg_apartments_temp_mjqm7i.currency, stg_apartments_temp_mjqm7i.listing_created_on, stg_apartments_temp_mjqm7i.is_active, stg_apartments_temp_mjqm7i.last_modified_timestamp); DROP TABLE raw_data.stg_apartments_temp_mjqm7i; END;", "redshiftTmpDir": "s3://aws-glue-assets-198170203035-us-east-1/temporary/", "useConnectionProperties": "true", "dbtable": "raw_data.stg_apartments_temp_mjqm7i", "connectionName": "Redshift connection", "preactions": "CREATE TABLE IF NOT EXISTS raw_data.stg_apartments (id INTEGER, title VARCHAR, source VARCHAR, price DECIMAL, currency VARCHAR, listing_created_on DATE, is_active BOOLEAN, last_modified_timestamp TIMESTAMP); DROP TABLE IF EXISTS raw_data.stg_apartments_temp_mjqm7i; CREATE TABLE raw_data.stg_apartments_temp_mjqm7i (id INTEGER, title VARCHAR, source VARCHAR, price DECIMAL, currency VARCHAR, listing_created_on DATE, is_active BOOLEAN, last_modified_timestamp TIMESTAMP);"}, transformation_ctx="AmazonRedshift_node1749987879948")

# Script generated for node Amazon Redshift
AmazonRedshift_node1749987533515 = glueContext.write_dynamic_frame.from_options(frame=AmazonS3_node1749987257186, connection_type="redshift", connection_options={"postactions": "BEGIN; MERGE INTO raw_data.stg_apartment_attributes USING raw_data.stg_apartment_attributes_temp_5w5jhk ON stg_apartment_attributes.id = stg_apartment_attributes_temp_5w5jhk.id WHEN MATCHED THEN UPDATE SET id = stg_apartment_attributes_temp_5w5jhk.id, category = stg_apartment_attributes_temp_5w5jhk.category, body = stg_apartment_attributes_temp_5w5jhk.body, amenities = stg_apartment_attributes_temp_5w5jhk.amenities, bathrooms = stg_apartment_attributes_temp_5w5jhk.bathrooms, bedrooms = stg_apartment_attributes_temp_5w5jhk.bedrooms, fee = stg_apartment_attributes_temp_5w5jhk.fee, has_photo = stg_apartment_attributes_temp_5w5jhk.has_photo, pets_allowed = stg_apartment_attributes_temp_5w5jhk.pets_allowed, price_display = stg_apartment_attributes_temp_5w5jhk.price_display, price_type = stg_apartment_attributes_temp_5w5jhk.price_type, square_feet = stg_apartment_attributes_temp_5w5jhk.square_feet, address = stg_apartment_attributes_temp_5w5jhk.address, cityname = stg_apartment_attributes_temp_5w5jhk.cityname, state = stg_apartment_attributes_temp_5w5jhk.state, latitude = stg_apartment_attributes_temp_5w5jhk.latitude, longitude = stg_apartment_attributes_temp_5w5jhk.longitude WHEN NOT MATCHED THEN INSERT VALUES (stg_apartment_attributes_temp_5w5jhk.id, stg_apartment_attributes_temp_5w5jhk.category, stg_apartment_attributes_temp_5w5jhk.body, stg_apartment_attributes_temp_5w5jhk.amenities, stg_apartment_attributes_temp_5w5jhk.bathrooms, stg_apartment_attributes_temp_5w5jhk.bedrooms, stg_apartment_attributes_temp_5w5jhk.fee, stg_apartment_attributes_temp_5w5jhk.has_photo, stg_apartment_attributes_temp_5w5jhk.pets_allowed, stg_apartment_attributes_temp_5w5jhk.price_display, stg_apartment_attributes_temp_5w5jhk.price_type, stg_apartment_attributes_temp_5w5jhk.square_feet, stg_apartment_attributes_temp_5w5jhk.address, stg_apartment_attributes_temp_5w5jhk.cityname, stg_apartment_attributes_temp_5w5jhk.state, stg_apartment_attributes_temp_5w5jhk.latitude, stg_apartment_attributes_temp_5w5jhk.longitude); DROP TABLE raw_data.stg_apartment_attributes_temp_5w5jhk; END;", "redshiftTmpDir": "s3://aws-glue-assets-198170203035-us-east-1/temporary/", "useConnectionProperties": "true", "dbtable": "raw_data.stg_apartment_attributes_temp_5w5jhk", "connectionName": "Redshift connection", "preactions": "CREATE TABLE IF NOT EXISTS raw_data.stg_apartment_attributes (id INTEGER, category VARCHAR, body VARCHAR, amenities VARCHAR, bathrooms INTEGER, bedrooms INTEGER, fee DECIMAL, has_photo BOOLEAN, pets_allowed BOOLEAN, price_display VARCHAR, price_type VARCHAR, square_feet INTEGER, address VARCHAR, cityname VARCHAR, state VARCHAR, latitude DECIMAL, longitude DECIMAL); DROP TABLE IF EXISTS raw_data.stg_apartment_attributes_temp_5w5jhk; CREATE TABLE raw_data.stg_apartment_attributes_temp_5w5jhk (id INTEGER, category VARCHAR, body VARCHAR, amenities VARCHAR, bathrooms INTEGER, bedrooms INTEGER, fee DECIMAL, has_photo BOOLEAN, pets_allowed BOOLEAN, price_display VARCHAR, price_type VARCHAR, square_feet INTEGER, address VARCHAR, cityname VARCHAR, state VARCHAR, latitude DECIMAL, longitude DECIMAL);"}, transformation_ctx="AmazonRedshift_node1749987533515")

job.commit()